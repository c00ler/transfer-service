/*
 * This file is generated by jOOQ.
 */
package com.revolut.transfer.persistence.jooq.tables.records;


import com.revolut.transfer.persistence.jooq.tables.Transfer;
import com.revolut.transfer.transaction.model.TransferState;

import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferRecord extends UpdatableRecordImpl<TransferRecord> implements Record7<UUID, UUID, UUID, UUID, UUID, Long, TransferState> {

    private static final long serialVersionUID = -1229559036;

    /**
     * Setter for <code>PUBLIC.TRANSFER.ID</code>.
     */
    public TransferRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.TRANSFER.ID</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFER.SOURCE_ACCOUNT_ID</code>.
     */
    public TransferRecord setSourceAccountId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.TRANSFER.SOURCE_ACCOUNT_ID</code>.
     */
    public UUID getSourceAccountId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFER.TARGET_ACCOUNT_ID</code>.
     */
    public TransferRecord setTargetAccountId(UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.TRANSFER.TARGET_ACCOUNT_ID</code>.
     */
    public UUID getTargetAccountId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFER.DEBIT_TRANSACTION_ID</code>.
     */
    public TransferRecord setDebitTransactionId(UUID value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.TRANSFER.DEBIT_TRANSACTION_ID</code>.
     */
    public UUID getDebitTransactionId() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFER.CREDIT_TRANSACTION_ID</code>.
     */
    public TransferRecord setCreditTransactionId(UUID value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.TRANSFER.CREDIT_TRANSACTION_ID</code>.
     */
    public UUID getCreditTransactionId() {
        return (UUID) get(4);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFER.AMOUNT</code>.
     */
    public TransferRecord setAmount(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.TRANSFER.AMOUNT</code>.
     */
    public Long getAmount() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFER.STATE</code>.
     */
    public TransferRecord setState(TransferState value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.TRANSFER.STATE</code>.
     */
    public TransferState getState() {
        return (TransferState) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, UUID, UUID, Long, TransferState> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, UUID, UUID, UUID, UUID, Long, TransferState> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Transfer.TRANSFER.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Transfer.TRANSFER.SOURCE_ACCOUNT_ID;
    }

    @Override
    public Field<UUID> field3() {
        return Transfer.TRANSFER.TARGET_ACCOUNT_ID;
    }

    @Override
    public Field<UUID> field4() {
        return Transfer.TRANSFER.DEBIT_TRANSACTION_ID;
    }

    @Override
    public Field<UUID> field5() {
        return Transfer.TRANSFER.CREDIT_TRANSACTION_ID;
    }

    @Override
    public Field<Long> field6() {
        return Transfer.TRANSFER.AMOUNT;
    }

    @Override
    public Field<TransferState> field7() {
        return Transfer.TRANSFER.STATE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getSourceAccountId();
    }

    @Override
    public UUID component3() {
        return getTargetAccountId();
    }

    @Override
    public UUID component4() {
        return getDebitTransactionId();
    }

    @Override
    public UUID component5() {
        return getCreditTransactionId();
    }

    @Override
    public Long component6() {
        return getAmount();
    }

    @Override
    public TransferState component7() {
        return getState();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getSourceAccountId();
    }

    @Override
    public UUID value3() {
        return getTargetAccountId();
    }

    @Override
    public UUID value4() {
        return getDebitTransactionId();
    }

    @Override
    public UUID value5() {
        return getCreditTransactionId();
    }

    @Override
    public Long value6() {
        return getAmount();
    }

    @Override
    public TransferState value7() {
        return getState();
    }

    @Override
    public TransferRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public TransferRecord value2(UUID value) {
        setSourceAccountId(value);
        return this;
    }

    @Override
    public TransferRecord value3(UUID value) {
        setTargetAccountId(value);
        return this;
    }

    @Override
    public TransferRecord value4(UUID value) {
        setDebitTransactionId(value);
        return this;
    }

    @Override
    public TransferRecord value5(UUID value) {
        setCreditTransactionId(value);
        return this;
    }

    @Override
    public TransferRecord value6(Long value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransferRecord value7(TransferState value) {
        setState(value);
        return this;
    }

    @Override
    public TransferRecord values(UUID value1, UUID value2, UUID value3, UUID value4, UUID value5, Long value6, TransferState value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransferRecord
     */
    public TransferRecord() {
        super(Transfer.TRANSFER);
    }

    /**
     * Create a detached, initialised TransferRecord
     */
    public TransferRecord(UUID id, UUID sourceAccountId, UUID targetAccountId, UUID debitTransactionId, UUID creditTransactionId, Long amount, TransferState state) {
        super(Transfer.TRANSFER);

        set(0, id);
        set(1, sourceAccountId);
        set(2, targetAccountId);
        set(3, debitTransactionId);
        set(4, creditTransactionId);
        set(5, amount);
        set(6, state);
    }
}
