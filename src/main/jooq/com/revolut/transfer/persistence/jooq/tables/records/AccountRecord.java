/*
 * This file is generated by jOOQ.
 */
package com.revolut.transfer.persistence.jooq.tables.records;


import com.revolut.transfer.persistence.jooq.tables.Account;

import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Row1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record1<UUID> {

    private static final long serialVersionUID = -1127106713;

    /**
     * Setter for <code>PUBLIC.ACCOUNT.ID</code>.
     */
    public AccountRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.ID</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record1 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row1<UUID> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    @Override
    public Row1<UUID> valuesRow() {
        return (Row1) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Account.ACCOUNT.ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public AccountRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public AccountRecord values(UUID value1) {
        value1(value1);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(UUID id) {
        super(Account.ACCOUNT);

        set(0, id);
    }
}
