/*
 * This file is generated by jOOQ.
 */
package com.revolut.transfer.persistence.jooq.tables;


import com.revolut.transfer.persistence.jooq.Indexes;
import com.revolut.transfer.persistence.jooq.Keys;
import com.revolut.transfer.persistence.jooq.Public;
import com.revolut.transfer.persistence.jooq.tables.records.TransferRecord;
import com.revolut.transfer.transaction.model.TransferState;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transfer extends TableImpl<TransferRecord> {

    private static final long serialVersionUID = -147622128;

    /**
     * The reference instance of <code>PUBLIC.TRANSFER</code>
     */
    public static final Transfer TRANSFER = new Transfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferRecord> getRecordType() {
        return TransferRecord.class;
    }

    /**
     * The column <code>PUBLIC.TRANSFER.ID</code>.
     */
    public final TableField<TransferRecord, UUID> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.SOURCE_ACCOUNT_ID</code>.
     */
    public final TableField<TransferRecord, UUID> SOURCE_ACCOUNT_ID = createField(DSL.name("SOURCE_ACCOUNT_ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.TARGET_ACCOUNT_ID</code>.
     */
    public final TableField<TransferRecord, UUID> TARGET_ACCOUNT_ID = createField(DSL.name("TARGET_ACCOUNT_ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.DEBIT_TRANSACTION_ID</code>.
     */
    public final TableField<TransferRecord, UUID> DEBIT_TRANSACTION_ID = createField(DSL.name("DEBIT_TRANSACTION_ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.CREDIT_TRANSACTION_ID</code>.
     */
    public final TableField<TransferRecord, UUID> CREDIT_TRANSACTION_ID = createField(DSL.name("CREDIT_TRANSACTION_ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.AMOUNT</code>.
     */
    public final TableField<TransferRecord, Long> AMOUNT = createField(DSL.name("AMOUNT"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.STATE</code>.
     */
    public final TableField<TransferRecord, TransferState> STATE = createField(DSL.name("STATE"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"PUBLIC\".\"TRANSFER_STATE\"").nullable(false), this, "", new org.jooq.impl.EnumConverter<java.lang.Object, com.revolut.transfer.transaction.model.TransferState>(java.lang.Object.class, com.revolut.transfer.transaction.model.TransferState.class));

    /**
     * Create a <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer() {
        this(DSL.name("TRANSFER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer(String alias) {
        this(DSL.name(alias), TRANSFER);
    }

    /**
     * Create an aliased <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer(Name alias) {
        this(alias, TRANSFER);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transfer(Table<O> child, ForeignKey<O, TransferRecord> key) {
        super(child, key, TRANSFER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_TRANSFER_SOURCE_ACCOUNT_ID_INDEX_7, Indexes.FK_TRANSFER_TARGET_ACCOUNT_ID_INDEX_7, Indexes.KEY_TRANSFER_CREDIT_TRANSACTION_ID, Indexes.KEY_TRANSFER_DEBIT_TRANSACTION_ID, Indexes.PRIMARY_KEY_7);
    }

    @Override
    public UniqueKey<TransferRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    public List<UniqueKey<TransferRecord>> getKeys() {
        return Arrays.<UniqueKey<TransferRecord>>asList(Keys.CONSTRAINT_7);
    }

    @Override
    public List<ForeignKey<TransferRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransferRecord, ?>>asList(Keys.FK_TRANSFER_SOURCE_ACCOUNT_ID, Keys.FK_TRANSFER_TARGET_ACCOUNT_ID);
    }

    public Account fkTransferSourceAccountId() {
        return new Account(this, Keys.FK_TRANSFER_SOURCE_ACCOUNT_ID);
    }

    public Account fkTransferTargetAccountId() {
        return new Account(this, Keys.FK_TRANSFER_TARGET_ACCOUNT_ID);
    }

    @Override
    public Transfer as(String alias) {
        return new Transfer(DSL.name(alias), this);
    }

    @Override
    public Transfer as(Name alias) {
        return new Transfer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(String name) {
        return new Transfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Name name) {
        return new Transfer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, UUID, UUID, Long, TransferState> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
