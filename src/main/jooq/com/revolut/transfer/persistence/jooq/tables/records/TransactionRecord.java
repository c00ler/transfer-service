/*
 * This file is generated by jOOQ.
 */
package com.revolut.transfer.persistence.jooq.tables.records;


import com.revolut.transfer.persistence.jooq.tables.Transaction;

import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionRecord extends UpdatableRecordImpl<TransactionRecord> implements Record3<UUID, UUID, Long> {

    private static final long serialVersionUID = -1742858387;

    /**
     * Setter for <code>PUBLIC.TRANSACTION.ID</code>.
     */
    public TransactionRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.TRANSACTION.ID</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>PUBLIC.TRANSACTION.ACCOUNT_ID</code>.
     */
    public TransactionRecord setAccountId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.TRANSACTION.ACCOUNT_ID</code>.
     */
    public UUID getAccountId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>PUBLIC.TRANSACTION.AMOUNT</code>.
     */
    public TransactionRecord setAmount(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.TRANSACTION.AMOUNT</code>.
     */
    public Long getAmount() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, UUID, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Transaction.TRANSACTION.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Transaction.TRANSACTION.ACCOUNT_ID;
    }

    @Override
    public Field<Long> field3() {
        return Transaction.TRANSACTION.AMOUNT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getAccountId();
    }

    @Override
    public Long component3() {
        return getAmount();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getAccountId();
    }

    @Override
    public Long value3() {
        return getAmount();
    }

    @Override
    public TransactionRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public TransactionRecord value2(UUID value) {
        setAccountId(value);
        return this;
    }

    @Override
    public TransactionRecord value3(Long value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransactionRecord values(UUID value1, UUID value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionRecord
     */
    public TransactionRecord() {
        super(Transaction.TRANSACTION);
    }

    /**
     * Create a detached, initialised TransactionRecord
     */
    public TransactionRecord(UUID id, UUID accountId, Long amount) {
        super(Transaction.TRANSACTION);

        set(0, id);
        set(1, accountId);
        set(2, amount);
    }
}
